from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import mlflow
import pandas as pd
import os
from mlflow.tracking import MlflowClient

# Configuration
EXPERIMENT_NAME = "loan-default-experiment"
MODEL_NAME = "loan-default-model"
MODEL_ALIAS = "production"  
MLFLOW_TRACKING_URI = os.getenv("MLFLOW_TRACKING_URI", "http://localhost:9090")  

# Set MLflow tracking URI
mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
client = MlflowClient()

# Load the model using the alias
try:
    model = mlflow.pyfunc.load_model(f"models:/{MODEL_NAME}@{MODEL_ALIAS}")
    print(f"✅ Model '{MODEL_NAME}@{MODEL_ALIAS}' loaded successfully.")
except Exception as e:
    print(f"❌ Failed to load model: {e}")
    model = None

# Initialize FastAPI
app = FastAPI(title="Loan Default Prediction API")

# Input schema
class InputData(BaseModel):
    age: float
    income: float
    loan_amount: float

@app.post("/predict")
def predict(input_data: InputData):
    if model is None:
        raise HTTPException(status_code=503, detail="Model is not available.")

    try:
        input_df = pd.DataFrame([input_data.dict()])
        prediction = model.predict(input_df)
        return {"prediction": int(prediction[0])}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction failed: {e}")