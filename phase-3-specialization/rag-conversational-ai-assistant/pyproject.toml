[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-conversational-ai-assistant"
version = "0.1.0"
description = "RAG Conversational AI Assistant with advanced features including LLM orchestration, prompt versioning, human-in-the-loop feedback, and drift detection"
authors = [
    {name = "Data AI Engineer Transition Team", email = "team@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["rag", "conversational-ai", "llm", "orchestration", "prompt-versioning", "human-in-the-loop", "drift-detection"]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "openai>=1.3.7",
    "anthropic>=0.7.8",
    "langchain>=0.0.350",
    "langchain-community>=0.0.10",
    "langchain-openai>=0.0.2",
    "llama-index>=0.9.15",
    "sentence-transformers>=2.2.2",
    "transformers>=4.36.2",
    "torch>=2.1.2",
    "numpy>=1.24.4",
    "scikit-learn>=1.3.2",
    "nltk>=3.8.1",
    "spacy>=3.7.2",
    "pinecone-client>=2.2.4",
    "weaviate-client>=3.25.3",
    "chromadb>=0.4.18",
    "faiss-cpu>=1.7.4",
    "pypdf2>=3.0.1",
    "pdfplumber>=0.10.3",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "python-magic>=0.4.27",
    "pytesseract>=0.3.10",
    "Pillow>=10.1.0",
    "streamlit>=1.28.2",
    "plotly>=5.17.0",
    "pandas>=2.1.4",
    "httpx>=0.25.2",
    "aiofiles>=23.2.1",
    "python-multipart>=0.0.6",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "evidently>=0.4.14",
    "mlflow>=2.8.1",
    "wandb>=0.16.1",
    "elasticsearch>=8.11.0",
    "pymongo>=4.6.0",
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "azure-identity>=1.15.0",
    "azure-keyvault-secrets>=4.7.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "tqdm>=4.66.1",
    "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]
monitoring = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-instrumentation-requests>=0.41b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.41b0",
    "opentelemetry-exporter-jaeger>=1.20.0",
    "opentelemetry-exporter-prometheus>=1.20.0",
]
deployment = [
    "docker>=6.1.3",
    "kubernetes>=28.1.0",
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/your-org/rag-conversational-ai-assistant"
Documentation = "https://github.com/your-org/rag-conversational-ai-assistant#readme"
Repository = "https://github.com/your-org/rag-conversational-ai-assistant.git"
"Bug Tracker" = "https://github.com/your-org/rag-conversational-ai-assistant/issues"

[project.scripts]
rag-assistant = "src.api.main:main"
rag-migrate = "src.utils.migrate:main"
rag-seed = "src.utils.seed:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "langchain"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "llama_index.*",
    "pinecone.*",
    "weaviate.*",
    "chromadb.*",
    "evidently.*",
    "mlflow.*",
    "wandb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_gpu: Tests that require GPU",
    "requires_api: Tests that require external API",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
